#!/usr/bin/env python3
"""
M√©todo de Newton-Raphson - Implementaci√≥n con men√∫s interactivos
Encuentra ra√≠ces de ecuaciones no lineales usando tangentes sucesivas
"""

import sys
import os
import time
import numpy as np
import matplotlib.pyplot as plt
import sympy as sp
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from tqdm import tqdm

# Agregar directorio padre al path para imports
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from utilidades import (
    validar_numero, validar_opcion_menu, validar_funcion, validar_tolerancia,
    validar_max_iteraciones, confirmar_accion, limpiar_pantalla, 
    mostrar_titulo_principal, mostrar_menu_opciones, mostrar_banner_metodo,
    mostrar_estado_configuracion, mostrar_progreso_ejecucion,
    mostrar_resultado_final, mostrar_mensaje_error, mostrar_mensaje_exito,
    mostrar_ayuda_metodo, esperar_enter, crear_tabla_iteraciones, formatear_numero,
    graficar_funcion, graficar_convergencia_newton
)

console = Console()

class MetodoNewtonRaphson:
    def __init__(self):
        self.funcion = None
        self.derivada = None
        self.funcion_str = ""
        self.derivada_str = ""
        self.x0 = None
        self.tolerancia = 1e-8
        self.max_iteraciones = 50
        self.derivada_automatica = True
        self.resultados = None
        
    def configuracion_completa(self) -> bool:
        """Verifica si la configuraci√≥n est√° completa"""
        return all([
            self.funcion is not None,
            self.derivada is not None,
            self.x0 is not None,
            self.tolerancia is not None,
            self.max_iteraciones is not None
        ])
    
    def mostrar_configuracion(self):
        """Muestra el estado actual de la configuraci√≥n"""
        config = {
            "Funci√≥n": self.funcion_str if self.funcion_str else None,
            "Derivada": self.derivada_str if self.derivada_str else None,
            "Valor inicial x‚ÇÄ": self.x0,
            "Tolerancia": self.tolerancia,
            "M√°x. Iteraciones": self.max_iteraciones,
            "Derivada autom√°tica": "S√≠" if self.derivada_automatica else "No"
        }
        mostrar_estado_configuracion(config)
    
    def ingresar_funcion(self):
        """Men√∫ para ingresar la funci√≥n"""
        limpiar_pantalla()
        mostrar_titulo_principal("M√©todo de Newton-Raphson", "Ingreso de Funci√≥n")
        
        console.print(Panel(
            "[bold cyan]Ingrese la funci√≥n f(x) = 0[/bold cyan]\n\n"
            "Ejemplos v√°lidos:\n"
            "‚Ä¢ x**2 - 4\n"
            "‚Ä¢ cos(x) - x\n"
            "‚Ä¢ exp(x) - 2*x - 1\n"
            "‚Ä¢ x**3 - 2*x - 5\n\n"
            "[yellow]Funciones disponibles:[/yellow]\n"
            "sin, cos, tan, exp, log, ln, sqrt, abs\n\n"
            "[green]üí° La derivada se calcular√° autom√°ticamente[/green]",
            title="üí° Ayuda para Funciones",
            border_style="blue"
        ))
        
        while True:
            funcion_input = input("\nIngrese f(x): ").strip()
            
            if not funcion_input:
                console.print("[red]‚ùå La funci√≥n no puede estar vac√≠a[/red]")
                continue
            
            es_valida, expr, error = validar_funcion(funcion_input)
            
            if es_valida:
                self.funcion = expr
                self.funcion_str = funcion_input
                
                # Calcular derivada autom√°ticamente
                try:
                    x = sp.Symbol('x')
                    self.derivada = sp.diff(self.funcion, x)
                    self.derivada_str = str(self.derivada)
                    self.derivada_automatica = True
                    
                    mostrar_mensaje_exito(f"Funci√≥n: f(x) = {funcion_input}")
                    console.print(f"[green]Derivada: f'(x) = {self.derivada_str}[/green]")
                    
                    # Preguntar si desea ingresar derivada manualmente
                    if confirmar_accion("¬øDesea ingresar la derivada manualmente?"):
                        self.ingresar_derivada_manual()
                    
                    # Mostrar gr√°fica de la funci√≥n
                    if confirmar_accion("¬øDesea ver la gr√°fica de la funci√≥n?"):
                        try:
                            graficar_funcion(self.funcion, (-10, 10), f"f(x) = {self.funcion_str}")
                        except Exception as e:
                            mostrar_mensaje_error(f"Error al graficar: {e}")
                    
                    esperar_enter()
                    break
                    
                except Exception as e:
                    mostrar_mensaje_error(f"Error al calcular la derivada: {e}")
                    if confirmar_accion("¬øDesea ingresar la derivada manualmente?"):
                        self.ingresar_derivada_manual()
                        if self.derivada is not None:
                            break
            else:
                mostrar_mensaje_error(f"Error en la funci√≥n: {error}")
    
    def ingresar_derivada_manual(self):
        """Permite ingresar la derivada manualmente"""
        console.print("\n[yellow]Ingrese la derivada f'(x) manualmente:[/yellow]")
        
        while True:
            derivada_input = input("Ingrese f'(x): ").strip()
            
            if not derivada_input:
                console.print("[red]‚ùå La derivada no puede estar vac√≠a[/red]")
                continue
            
            es_valida, expr, error = validar_funcion(derivada_input)
            
            if es_valida:
                self.derivada = expr
                self.derivada_str = derivada_input
                self.derivada_automatica = False
                mostrar_mensaje_exito(f"Derivada ingresada: f'(x) = {derivada_input}")
                break
            else:
                mostrar_mensaje_error(f"Error en la derivada: {error}")
    
    def ingresar_valor_inicial(self):
        """Men√∫ para ingresar el valor inicial x‚ÇÄ"""
        limpiar_pantalla()
        mostrar_titulo_principal("M√©todo de Newton-Raphson", "Valor Inicial x‚ÇÄ")
        
        if self.funcion is None or self.derivada is None:
            mostrar_mensaje_error("Primero debe ingresar la funci√≥n y su derivada")
            esperar_enter()
            return
        
        console.print(Panel(
            "[bold cyan]Ingrese el valor inicial x‚ÇÄ[/bold cyan]\n\n"
            "[yellow]Consideraciones importantes:[/yellow]\n"
            "‚Ä¢ El valor inicial debe estar cerca de la ra√≠z\n"
            "‚Ä¢ f'(x‚ÇÄ) ‚â† 0 (derivada no debe ser cero)\n"
            "‚Ä¢ Evite puntos de inflexi√≥n o m√≠nimos/m√°ximos locales\n"
            "‚Ä¢ Un buen x‚ÇÄ garantiza convergencia r√°pida",
            title="üìç Selecci√≥n de Valor Inicial",
            border_style="yellow"
        ))
        
        # Mostrar gr√°fica para ayudar a elegir x‚ÇÄ
        if confirmar_accion("¬øDesea ver la gr√°fica para elegir un buen x‚ÇÄ?"):
            try:
                graficar_funcion(self.funcion, (-10, 10), f"f(x) = {self.funcion_str}")
            except Exception as e:
                mostrar_mensaje_error(f"Error al graficar: {e}")
        
        while True:
            self.x0 = validar_numero("Ingrese el valor inicial x‚ÇÄ", "float")
            
            # Evaluar funci√≥n y derivada en x‚ÇÄ
            try:
                x = sp.Symbol('x')
                fx0 = float(self.funcion.subs(x, self.x0))
                fpx0 = float(self.derivada.subs(x, self.x0))
                
                console.print(f"\n[cyan]f(x‚ÇÄ) = f({self.x0}) = {formatear_numero(fx0)}[/cyan]")
                console.print(f"[cyan]f'(x‚ÇÄ) = f'({self.x0}) = {formatear_numero(fpx0)}[/cyan]")
                
                # Verificar que la derivada no sea cero
                if abs(fpx0) < 1e-12:
                    mostrar_mensaje_error(
                        "‚ö†Ô∏è La derivada es muy peque√±a o cero en este punto.\n"
                        "Esto puede causar problemas de convergencia."
                    )
                    if not confirmar_accion("¬øDesea continuar de todas formas?"):
                        continue
                
                # Estimar pr√≥xima iteraci√≥n
                if abs(fpx0) > 1e-12:
                    x1 = self.x0 - fx0 / fpx0
                    console.print(f"[green]Primera iteraci√≥n: x‚ÇÅ ‚âà {formatear_numero(x1)}[/green]")
                
                mostrar_mensaje_exito(f"Valor inicial configurado: x‚ÇÄ = {self.x0}")
                esperar_enter()
                break
                
            except Exception as e:
                mostrar_mensaje_error(f"Error al evaluar en x‚ÇÄ: {e}")
    
    def configurar_parametros(self):
        """Men√∫ para configurar tolerancia y m√°ximo de iteraciones"""
        limpiar_pantalla()
        mostrar_titulo_principal("M√©todo de Newton-Raphson", "Configuraci√≥n de Par√°metros")
        
        console.print(Panel(
            f"[bold cyan]Configuraci√≥n actual:[/bold cyan]\n\n"
            f"Tolerancia: {self.tolerancia}\n"
            f"M√°ximo de iteraciones: {self.max_iteraciones}",
            title="‚öôÔ∏è Par√°metros Actuales",
            border_style="cyan"
        ))
        
        opciones = [
            "Cambiar tolerancia",
            "Cambiar m√°ximo de iteraciones",
            "Configurar derivada",
            "Restaurar valores por defecto",
            "Volver al men√∫ principal"
        ]
        
        mostrar_menu_opciones(opciones, "Configurar par√°metros", False)
        opcion = validar_opcion_menu([1, 2, 3, 4, 5])
        
        if opcion == 1:
            console.print("\n[yellow]Tolerancia para |x_{n+1} - x_n| o |f(x_n)|[/yellow]")
            nueva_tol = validar_numero(
                f"Nueva tolerancia (actual: {self.tolerancia})", 
                "float", 
                min_val=1e-15, 
                max_val=1.0,
                excluir_cero=True
            )
            
            es_valida, error = validar_tolerancia(nueva_tol)
            if es_valida:
                self.tolerancia = nueva_tol
                mostrar_mensaje_exito(f"Tolerancia actualizada: {nueva_tol}")
            else:
                mostrar_mensaje_error(error)
                
        elif opcion == 2:
            console.print("\n[yellow]M√°ximo n√∫mero de iteraciones antes de parar[/yellow]")
            nuevo_max = validar_numero(
                f"Nuevo m√°ximo (actual: {self.max_iteraciones})", 
                "int", 
                min_val=1, 
                max_val=1000
            )
            
            es_valido, error = validar_max_iteraciones(nuevo_max)
            if es_valido:
                self.max_iteraciones = nuevo_max
                mostrar_mensaje_exito(f"M√°ximo de iteraciones actualizado: {nuevo_max}")
            else:
                mostrar_mensaje_error(error)
                
        elif opcion == 3:
            if self.funcion is not None:
                self.ingresar_derivada_manual()
            else:
                mostrar_mensaje_error("Primero debe ingresar una funci√≥n")
                
        elif opcion == 4:
            self.tolerancia = 1e-8
            self.max_iteraciones = 50
            mostrar_mensaje_exito("Par√°metros restaurados a valores por defecto")
            
        if opcion != 5:
            esperar_enter()
    
    def ejecutar_metodo(self):
        """Ejecuta el m√©todo de Newton-Raphson"""
        if not self.configuracion_completa():
            mostrar_mensaje_error("La configuraci√≥n no est√° completa")
            esperar_enter()
            return
        
        limpiar_pantalla()
        mostrar_titulo_principal("M√©todo de Newton-Raphson", "Ejecutando Algoritmo")
        
        self.mostrar_configuracion()
        
        if not confirmar_accion("¬øDesea ejecutar el m√©todo con esta configuraci√≥n?"):
            return
        
        mostrar_progreso_ejecucion("Ejecutando m√©todo de Newton-Raphson...")
        
        # Inicializar variables
        x = sp.Symbol('x')
        x_actual = float(self.x0)
        iteraciones = []
        valores_x = []
        valores_fx = []
        valores_fpx = []
        errores_abs = []
        errores_rel = []
        
        tiempo_inicio = time.time()
        
        # Barra de progreso
        with tqdm(total=self.max_iteraciones, desc="Iteraciones", unit="iter") as pbar:
            for i in range(self.max_iteraciones):
                # Evaluar funci√≥n y derivada
                try:
                    fx = float(self.funcion.subs(x, x_actual))
                    fpx = float(self.derivada.subs(x, x_actual))
                    
                    # Verificar derivada no nula
                    if abs(fpx) < 1e-15:
                        console.print(f"\n[red]‚ùå Derivada nula en iteraci√≥n {i+1}[/red]")
                        break
                    
                    # Calcular nueva aproximaci√≥n
                    x_nuevo = x_actual - fx / fpx
                    
                    # Calcular errores
                    error_abs = abs(x_nuevo - x_actual) if i > 0 else abs(fx)
                    error_rel = error_abs / abs(x_nuevo) if abs(x_nuevo) > 1e-15 else error_abs
                    
                    # Guardar datos de la iteraci√≥n
                    iteraciones.append(i + 1)
                    valores_x.append(x_actual)
                    valores_fx.append(fx)
                    valores_fpx.append(fpx)
                    errores_abs.append(error_abs)
                    errores_rel.append(error_rel)
                    
                    # Verificar convergencia
                    if error_abs < self.tolerancia or abs(fx) < self.tolerancia:
                        # Agregar √∫ltima iteraci√≥n
                        valores_x.append(x_nuevo)
                        break
                    
                    # Verificar divergencia
                    if abs(x_nuevo) > 1e10:
                        console.print(f"\n[red]‚ùå El m√©todo est√° divergiendo[/red]")
                        break
                    
                    x_actual = x_nuevo
                    pbar.update(1)
                    
                except Exception as e:
                    console.print(f"\n[red]‚ùå Error num√©rico en iteraci√≥n {i+1}: {e}[/red]")
                    break
        
        tiempo_ejecucion = time.time() - tiempo_inicio
        
        # Verificar si se encontr√≥ soluci√≥n
        if len(valores_x) > len(iteraciones):
            # Se agreg√≥ la √∫ltima iteraci√≥n (convergencia)
            x_final = valores_x[-1]
            fx_final = float(self.funcion.subs(x, x_final))
            convergencia = True
        else:
            # No hubo convergencia
            x_final = valores_x[-1] if valores_x else self.x0
            fx_final = valores_fx[-1] if valores_fx else float(self.funcion.subs(x, self.x0))
            convergencia = False
        
        # Preparar resultados
        self.resultados = {
            "raiz": x_final,
            "valor_funcion": fx_final,
            "iteraciones": len(iteraciones),
            "error_final": errores_abs[-1] if errores_abs else float('inf'),
            "convergencia": convergencia,
            "tolerancia": self.tolerancia,
            "valor_inicial": self.x0,
            "tiempo_ejecucion": tiempo_ejecucion,
            "iteraciones_datos": {
                "numeros": iteraciones,
                "x_vals": valores_x,
                "fx_vals": valores_fx,
                "fpx_vals": valores_fpx,
                "errores_abs": errores_abs,
                "errores_rel": errores_rel
            }
        }
        
        if convergencia:
            mostrar_mensaje_exito("¬°M√©todo convergi√≥ exitosamente!")
        else:
            mostrar_mensaje_error("El m√©todo no convergi√≥. Revise el valor inicial.")
        
        esperar_enter()
    
    def mostrar_resultados(self):
        """Muestra los resultados del m√©todo"""
        if self.resultados is None:
            mostrar_mensaje_error("No hay resultados disponibles. Ejecute el m√©todo primero.")
            esperar_enter()
            return
        
        limpiar_pantalla()
        mostrar_titulo_principal("M√©todo de Newton-Raphson", "Resultados")
        
        # Mostrar resultado principal
        resultado_display = {
            "raiz": self.resultados["raiz"],
            "valor_funcion": self.resultados["valor_funcion"],
            "iteraciones": self.resultados["iteraciones"],
            "error_final": self.resultados["error_final"],
            "convergencia": self.resultados["convergencia"],
            "tolerancia_usada": self.resultados["tolerancia"],
            "valor_inicial": self.resultados["valor_inicial"]
        }
        
        mostrar_resultado_final("Newton-Raphson", resultado_display, self.resultados["tiempo_ejecucion"])
        
        # Men√∫ de opciones para resultados
        opciones = [
            "Ver tabla de iteraciones",
            "Ver gr√°fica de convergencia",
            "Ver gr√°fica de la funci√≥n con la ra√≠z",
            "Analizar velocidad de convergencia",
            "Exportar resultados",
            "Volver al men√∫ principal"
        ]
        
        mostrar_menu_opciones(opciones, "Opciones de resultados", False)
        opcion = validar_opcion_menu([1, 2, 3, 4, 5, 6])
        
        if opcion == 1:
            self.mostrar_tabla_iteraciones()
        elif opcion == 2:
            self.mostrar_grafica_convergencia()
        elif opcion == 3:
            self.mostrar_grafica_funcion_raiz()
        elif opcion == 4:
            self.analizar_convergencia()
        elif opcion == 5:
            self.exportar_resultados()
        elif opcion == 6:
            return
    
    def mostrar_tabla_iteraciones(self):
        """Muestra la tabla detallada de iteraciones"""
        limpiar_pantalla()
        mostrar_titulo_principal("M√©todo de Newton-Raphson", "Tabla de Iteraciones")
        
        datos = self.resultados["iteraciones_datos"]
        
        # Crear datos para la tabla
        valores_tabla = []
        for i in range(len(datos["numeros"])):
            valores_tabla.append({
                "x_n": datos["x_vals"][i],
                "f(x_n)": datos["fx_vals"][i],
                "f'(x_n)": datos["fpx_vals"][i],
                "Error Abs": datos["errores_abs"][i],
                "Error Rel": datos["errores_rel"][i]
            })
        
        tabla = crear_tabla_iteraciones(
            datos["numeros"], 
            valores_tabla,
            "Iteraciones del M√©todo de Newton-Raphson"
        )
        
        console.print(tabla)
        esperar_enter()
    
    def mostrar_grafica_convergencia(self):
        """Muestra gr√°ficas de convergencia"""
        console.print("[yellow]Generando gr√°ficas de convergencia...[/yellow]")
        
        datos = self.resultados["iteraciones_datos"]
        
        try:
            # Estimar rango para la gr√°fica de la funci√≥n
            x_vals = datos["x_vals"]
            if len(x_vals) > 1:
                x_min, x_max = min(x_vals), max(x_vals)
                margen = max(abs(x_max - x_min), 2.0)
                x_centro = (x_min + x_max) / 2
                rango = (x_centro - margen, x_centro + margen)
            else:
                rango = (self.x0 - 5, self.x0 + 5)
            
            graficar_convergencia_newton(
                datos["numeros"],
                datos["x_vals"],
                datos["errores_abs"],
                self.funcion,
                rango
            )
        except Exception as e:
            mostrar_mensaje_error(f"Error al generar gr√°ficas: {e}")
        
        esperar_enter()
    
    def mostrar_grafica_funcion_raiz(self):
        """Muestra la funci√≥n con la ra√≠z encontrada"""
        console.print("[yellow]Generando gr√°fica de la funci√≥n con la ra√≠z...[/yellow]")
        
        try:
            raiz = self.resultados["raiz"]
            x = sp.Symbol('x')
            f_raiz = float(self.funcion.subs(x, raiz))
            
            # Rango de graficaci√≥n alrededor de la ra√≠z
            margen = max(abs(raiz - self.x0), 2.0)
            rango = (raiz - margen, raiz + margen)
            
            puntos_especiales = [
                (self.x0, float(self.funcion.subs(x, self.x0)), f"x‚ÇÄ = {formatear_numero(self.x0)}", "blue"),
                (raiz, f_raiz, f"Ra√≠z: {formatear_numero(raiz)}", "red")
            ]
            
            graficar_funcion(
                self.funcion,
                rango,
                f"f(x) = {self.funcion_str} - Convergencia Newton-Raphson",
                puntos_especiales
            )
        except Exception as e:
            mostrar_mensaje_error(f"Error al generar gr√°fica: {e}")
        
        esperar_enter()
    
    def analizar_convergencia(self):
        """Analiza la velocidad de convergencia del m√©todo"""
        limpiar_pantalla()
        mostrar_titulo_principal("Newton-Raphson", "An√°lisis de Convergencia")
        
        datos = self.resultados["iteraciones_datos"]
        
        if len(datos["errores_abs"]) < 3:
            mostrar_mensaje_error("Se necesitan al menos 3 iteraciones para el an√°lisis")
            esperar_enter()
            return
        
        # Calcular orden de convergencia
        errores = datos["errores_abs"]
        ordenes = []
        
        for i in range(2, len(errores)):
            if errores[i-1] > 0 and errores[i-2] > 0:
                try:
                    orden = np.log(errores[i] / errores[i-1]) / np.log(errores[i-1] / errores[i-2])
                    ordenes.append(orden)
                except:
                    pass
        
        # Mostrar an√°lisis
        console.print(Panel(
            f"[bold cyan]An√°lisis de Convergencia[/bold cyan]\n\n"
            f"N√∫mero de iteraciones: {len(datos['numeros'])}\n"
            f"Error final: {formatear_numero(self.resultados['error_final'])}\n"
            f"Convergencia: {'S√≠' if self.resultados['convergencia'] else 'No'}\n\n"
            f"[yellow]Orden de convergencia estimado:[/yellow]\n"
            f"Promedio: {np.mean(ordenes):.2f} (te√≥rico: 2.0)\n"
            f"Rango: [{min(ordenes):.2f}, {max(ordenes):.2f}]" if ordenes else "No calculable",
            title="üìà An√°lisis Num√©rico",
            border_style="green"
        ))
        
        # Mostrar tabla de √≥rdenes
        if ordenes:
            table = Table(title="Orden de Convergencia por Iteraci√≥n", border_style="blue")
            table.add_column("Iteraci√≥n", style="cyan")
            table.add_column("Orden", style="white")
            table.add_column("Interpretaci√≥n", style="yellow")
            
            for i, orden in enumerate(ordenes):
                if orden < 1.5:
                    interpretacion = "Sublineal"
                elif orden < 1.8:
                    interpretacion = "Casi lineal"
                elif orden < 2.2:
                    interpretacion = "Cuadr√°tica"
                else:
                    interpretacion = "Supercuadr√°tica"
                
                table.add_row(str(i + 3), f"{orden:.3f}", interpretacion)
            
            console.print(table)
        
        esperar_enter()
    
    def exportar_resultados(self):
        """Exporta los resultados a un archivo de texto"""
        try:
            nombre_archivo = f"newton_raphson_resultados_{int(time.time())}.txt"
            
            with open(nombre_archivo, 'w', encoding='utf-8') as f:
                f.write("RESULTADOS DEL M√âTODO DE NEWTON-RAPHSON\n")
                f.write("=" * 50 + "\n\n")
                
                f.write(f"Funci√≥n: f(x) = {self.funcion_str}\n")
                f.write(f"Derivada: f'(x) = {self.derivada_str}\n")
                f.write(f"Valor inicial: x‚ÇÄ = {self.x0}\n")
                f.write(f"Tolerancia: {self.tolerancia}\n")
                f.write(f"M√°ximo de iteraciones: {self.max_iteraciones}\n\n")
                
                f.write("RESULTADO:\n")
                f.write(f"Ra√≠z encontrada: {formatear_numero(self.resultados['raiz'])}\n")
                f.write(f"f(ra√≠z): {formatear_numero(self.resultados['valor_funcion'])}\n")
                f.write(f"Iteraciones: {self.resultados['iteraciones']}\n")
                f.write(f"Error final: {formatear_numero(self.resultados['error_final'])}\n")
                f.write(f"Convergencia: {'S√≠' if self.resultados['convergencia'] else 'No'}\n")
                f.write(f"Tiempo de ejecuci√≥n: {self.resultados['tiempo_ejecucion']:.4f} segundos\n\n")
                
                f.write("TABLA DE ITERACIONES:\n")
                f.write("-" * 90 + "\n")
                f.write(f"{'Iter':<6} {'x_n':<15} {'f(x_n)':<15} {'f\\'(x_n)':<15} {'Error Abs':<15} {'Error Rel':<15}\n")
                f.write("-" * 90 + "\n")
                
                datos = self.resultados["iteraciones_datos"]
                for i in range(len(datos["numeros"])):
                    f.write(f"{datos['numeros'][i]:<6} "
                           f"{formatear_numero(datos['x_vals'][i]):<15} "
                           f"{formatear_numero(datos['fx_vals'][i]):<15} "
                           f"{formatear_numero(datos['fpx_vals'][i]):<15} "
                           f"{formatear_numero(datos['errores_abs'][i]):<15} "
                           f"{formatear_numero(datos['errores_rel'][i]):<15}\n")
            
            mostrar_mensaje_exito(f"Resultados exportados a: {nombre_archivo}")
            
        except Exception as e:
            mostrar_mensaje_error(f"Error al exportar: {e}")
        
        esperar_enter()
    
    def mostrar_ayuda(self):
        """Muestra informaci√≥n de ayuda sobre el m√©todo"""
        mostrar_ayuda_metodo(
            "M√©todo de Newton-Raphson",
            "El m√©todo de Newton-Raphson utiliza la tangente a la curva para aproximar "
            "sucesivamente la ra√≠z. Tiene convergencia cuadr√°tica cuando converge, "
            "pero requiere que la derivada no sea cero y un buen valor inicial.",
            [
                "Encontrar ra√≠ces de ecuaciones no lineales",
                "Resolver ecuaciones trascendentales complejas",
                "Optimizaci√≥n (encontrar puntos cr√≠ticos)",
                "Sistemas no lineales (versi√≥n multivariable)"
            ],
            [
                "Convergencia cuadr√°tica muy r√°pida",
                "Pocas iteraciones necesarias",
                "Funciona bien con funciones suaves",
                "F√°cil de implementar para una variable"
            ],
            [
                "Requiere calcular la derivada",
                "Sensible al valor inicial",
                "Puede diverger o ciclar",
                "Problemas cuando f'(x) = 0"
            ]
        )

def main():
    """Funci√≥n principal del programa"""
    metodo = MetodoNewtonRaphson()
    
    while True:
        limpiar_pantalla()
        mostrar_titulo_principal(
            "M√âTODO DE NEWTON-RAPHSON",
            "B√∫squeda de ra√≠ces usando tangentes sucesivas"
        )
        
        mostrar_banner_metodo(
            "M√©todo de Newton-Raphson",
            "Encuentra ra√≠ces usando la f√≥rmula: x_{n+1} = x_n - f(x_n)/f'(x_n)"
        )
        
        metodo.mostrar_configuracion()
        
        opciones = [
            "Ingresar funci√≥n f(x) y derivada",
            "Configurar valor inicial x‚ÇÄ",
            "Configurar par√°metros (tolerancia, iteraciones)",
            "Ejecutar m√©todo de Newton-Raphson",
            "Ver resultados y an√°lisis",
            "Ver ayuda del m√©todo",
            "Salir"
        ]
        
        mostrar_menu_opciones(opciones)
        opcion = validar_opcion_menu([1, 2, 3, 4, 5, 6, 7])
        
        if opcion == 1:
            metodo.ingresar_funcion()
        elif opcion == 2:
            metodo.ingresar_valor_inicial()
        elif opcion == 3:
            metodo.configurar_parametros()
        elif opcion == 4:
            metodo.ejecutar_metodo()
        elif opcion == 5:
            metodo.mostrar_resultados()
        elif opcion == 6:
            metodo.mostrar_ayuda()
        elif opcion == 7:
            console.print("\n[green]¬°Gracias por usar el m√©todo de Newton-Raphson![/green]")
            break

if __name__ == "__main__":
    main()
