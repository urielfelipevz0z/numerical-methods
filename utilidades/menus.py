#!/usr/bin/env python3
"""
M√≥dulo de men√∫s para m√©todos num√©ricos
Funciones para crear men√∫s consistentes y atractivos con Rich
"""

import os
from rich.console import Console
from rich.panel import Panel
from rich.text import Text
from rich.table import Table
from rich.layout import Layout
from rich.align import Align
from typing import List, Dict, Optional, Any

console = Console()

def limpiar_pantalla():
    """Limpia la pantalla de la consola"""
    os.system('clear' if os.name == 'posix' else 'cls')

def mostrar_titulo_principal(titulo: str, subtitulo: str = ""):
    """
    Muestra un t√≠tulo principal elegante
    
    Args:
        titulo: T√≠tulo principal
        subtitulo: Subt√≠tulo opcional
    """
    limpiar_pantalla()
    
    # Crear el texto del t√≠tulo
    titulo_text = Text(titulo, style="bold blue", justify="center")
    if subtitulo:
        titulo_text.append(f"\n{subtitulo}", style="italic cyan")
    
    # Crear panel con el t√≠tulo
    panel = Panel(
        titulo_text,
        border_style="bright_blue",
        padding=(1, 2),
        title="üî¢ M√©todos Num√©ricos",
        title_align="center"
    )
    
    console.print(panel)
    console.print()

def mostrar_menu_opciones(
    opciones: List[str], 
    titulo: str = "Seleccione una opci√≥n",
    mostrar_salir: bool = True,
    color_titulo: str = "bright_green"
) -> None:
    """
    Muestra un men√∫ de opciones numeradas
    
    Args:
        opciones: Lista de opciones del men√∫
        titulo: T√≠tulo del men√∫
        mostrar_salir: Si True, agrega opci√≥n de salir
        color_titulo: Color del t√≠tulo
    """
    # Crear tabla para el men√∫
    table = Table(
        show_header=False,
        show_edge=False,
        padding=(0, 2),
        border_style="dim"
    )
    
    table.add_column("Opci√≥n", style="bold bright_cyan", width=8)
    table.add_column("Descripci√≥n", style="white")
    
    # Agregar opciones
    for i, opcion in enumerate(opciones, 1):
        table.add_row(f"[{i}]", opcion)
    
    # Agregar opci√≥n de salir si se solicita
    if mostrar_salir:
        numero_salir = len(opciones) + 1
        table.add_row(f"[{numero_salir}]", "Salir", style="dim")
    
    # Crear panel con el men√∫
    panel = Panel(
        table,
        title=titulo,
        title_align="left",
        border_style=color_titulo,
        padding=(1, 2)
    )
    
    console.print(panel)

def mostrar_submenu(
    titulo: str,
    opciones: List[str],
    descripcion: str = "",
    color: str = "bright_yellow"
) -> None:
    """
    Muestra un submen√∫ con formato consistente
    
    Args:
        titulo: T√≠tulo del submen√∫
        opciones: Lista de opciones
        descripcion: Descripci√≥n opcional
        color: Color del borde
    """
    content = []
    
    if descripcion:
        content.append(Text(descripcion, style="italic"))
        content.append("")
    
    # Crear tabla para opciones
    table = Table(show_header=False, show_edge=False, padding=(0, 1))
    table.add_column("", style="bold bright_cyan", width=6)
    table.add_column("", style="white")
    
    for i, opcion in enumerate(opciones, 1):
        table.add_row(f"[{i}]", opcion)
    
    content.append(table)
    
    panel = Panel(
        "\n".join(str(item) for item in content) if isinstance(content[0], str) else table,
        title=titulo,
        border_style=color,
        padding=(1, 2)
    )
    
    console.print(panel)

def mostrar_banner_metodo(nombre_metodo: str, descripcion: str):
    """
    Muestra un banner para el m√©todo seleccionado
    
    Args:
        nombre_metodo: Nombre del m√©todo
        descripcion: Descripci√≥n breve del m√©todo
    """
    texto_banner = Text()
    texto_banner.append(nombre_metodo, style="bold bright_magenta")
    texto_banner.append(f"\n\n{descripcion}", style="italic bright_white")
    
    panel = Panel(
        texto_banner,
        border_style="bright_magenta",
        padding=(2, 4),
        title="üìä M√©todo Seleccionado",
        title_align="center"
    )
    
    console.print(panel)
    console.print()

def mostrar_estado_configuracion(configuracion: Dict[str, Any]):
    """
    Muestra el estado actual de la configuraci√≥n
    
    Args:
        configuracion: Diccionario con la configuraci√≥n actual
    """
    table = Table(
        title="üîß Configuraci√≥n Actual",
        title_style="bold bright_green",
        border_style="green",
        show_header=True
    )
    
    table.add_column("Par√°metro", style="bright_cyan", width=20)
    table.add_column("Valor", style="white", width=30)
    table.add_column("Estado", style="bold", width=15)
    
    for key, value in configuracion.items():
        if value is not None:
            valor_str = str(value)
            estado = "[green]‚úì Configurado[/green]"
        else:
            valor_str = "[dim]No configurado[/dim]"
            estado = "[red]‚úó Pendiente[/red]"
        
        table.add_row(key, valor_str, estado)
    
    console.print(table)
    console.print()

def mostrar_progreso_ejecucion(mensaje: str):
    """
    Muestra un mensaje de progreso durante la ejecuci√≥n
    
    Args:
        mensaje: Mensaje a mostrar
    """
    panel = Panel(
        Text(mensaje, style="bright_yellow", justify="center"),
        border_style="yellow",
        padding=(1, 2),
        title="‚öôÔ∏è Ejecutando",
        title_align="center"
    )
    
    console.print(panel)

def mostrar_mensaje_exito(mensaje: str):
    """
    Muestra un mensaje de √©xito
    
    Args:
        mensaje: Mensaje de √©xito
    """
    panel = Panel(
        Text(mensaje, style="bold bright_green", justify="center"),
        border_style="bright_green",
        padding=(1, 2),
        title="‚úÖ √âxito",
        title_align="center"
    )
    
    console.print(panel)

def mostrar_mensaje_error(mensaje: str):
    """
    Muestra un mensaje de error
    
    Args:
        mensaje: Mensaje de error
    """
    panel = Panel(
        Text(mensaje, style="bold bright_red", justify="center"),
        border_style="bright_red",
        padding=(1, 2),
        title="‚ùå Error",
        title_align="center"
    )
    
    console.print(panel)

def mostrar_mensaje_advertencia(mensaje: str):
    """
    Muestra un mensaje de advertencia
    
    Args:
        mensaje: Mensaje de advertencia
    """
    panel = Panel(
        Text(mensaje, style="bold bright_yellow", justify="center"),
        border_style="bright_yellow",
        padding=(1, 2),
        title="‚ö†Ô∏è Advertencia",
        title_align="center"
    )
    
    console.print(panel)

def mostrar_separador(caracter: str = "‚îÄ", longitud: int = 80):
    """
    Muestra un separador visual
    
    Args:
        caracter: Car√°cter para el separador
        longitud: Longitud del separador
    """
    console.print(caracter * longitud, style="dim")

def mostrar_ayuda_metodo(
    nombre: str,
    descripcion: str,
    aplicaciones: List[str],
    ventajas: List[str],
    limitaciones: List[str]
):
    """
    Muestra informaci√≥n de ayuda para un m√©todo
    
    Args:
        nombre: Nombre del m√©todo
        descripcion: Descripci√≥n del m√©todo
        aplicaciones: Lista de aplicaciones
        ventajas: Lista de ventajas
        limitaciones: Lista de limitaciones
    """
    limpiar_pantalla()
    
    # T√≠tulo
    titulo = Panel(
        Text(f"Ayuda: {nombre}", style="bold bright_blue", justify="center"),
        border_style="bright_blue",
        padding=(1, 2)
    )
    console.print(titulo)
    console.print()
    
    # Descripci√≥n
    desc_panel = Panel(
        descripcion,
        title="üìñ Descripci√≥n",
        border_style="blue",
        padding=(1, 2)
    )
    console.print(desc_panel)
    console.print()
    
    # Layout para ventajas y limitaciones
    layout = Layout()
    layout.split_row(
        Layout(name="ventajas"),
        Layout(name="limitaciones")
    )
    
    # Ventajas
    ventajas_text = "\n".join(f"‚Ä¢ {ventaja}" for ventaja in ventajas)
    ventajas_panel = Panel(
        ventajas_text,
        title="‚úÖ Ventajas",
        border_style="green",
        padding=(1, 2)
    )
    
    # Limitaciones
    limitaciones_text = "\n".join(f"‚Ä¢ {limitacion}" for limitacion in limitaciones)
    limitaciones_panel = Panel(
        limitaciones_text,
        title="‚ö†Ô∏è Limitaciones",
        border_style="yellow",
        padding=(1, 2)
    )
    
    layout["ventajas"].update(ventajas_panel)
    layout["limitaciones"].update(limitaciones_panel)
    console.print(layout)
    console.print()
    
    # Aplicaciones
    aplicaciones_text = "\n".join(f"‚Ä¢ {aplicacion}" for aplicacion in aplicaciones)
    aplicaciones_panel = Panel(
        aplicaciones_text,
        title="üéØ Aplicaciones",
        border_style="magenta",
        padding=(1, 2)
    )
    console.print(aplicaciones_panel)
    
    console.print("\n" + "‚ïê" * 80)
    input("Presione Enter para volver al men√∫ principal...")

def esperar_enter(mensaje: str = "Presione Enter para continuar..."):
    """
    Pausa la ejecuci√≥n esperando que el usuario presione Enter
    
    Args:
        mensaje: Mensaje a mostrar
    """
    console.print(f"\n[dim]{mensaje}[/dim]")
    input()
