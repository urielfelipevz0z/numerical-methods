#!/usr/bin/env python3
"""
Regresi√≥n Lineal - Implementaci√≥n con men√∫s interactivos
Ajusta una recta y = mx + b a un conjunto de datos usando m√≠nimos cuadrados
"""

import sys
import os
import time
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.layout import Layout

# Agregar directorio padre al path para imports
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from utilidades import (
    validar_numero, validar_opcion_menu, confirmar_accion, limpiar_pantalla,
    mostrar_titulo_principal, mostrar_menu_opciones, mostrar_banner_metodo,
    mostrar_estado_configuracion, mostrar_progreso_ejecucion,
    mostrar_resultado_final, mostrar_mensaje_error, mostrar_mensaje_exito,
    mostrar_ayuda_metodo, esperar_enter, formatear_numero,
    mostrar_tabla_datos, mostrar_estadisticas_datos, graficar_regresion
)

console = Console()

class RegresionLineal:
    def __init__(self):
        self.x_datos = None
        self.y_datos = None
        self.n_datos = 0
        self.metodo_ingreso = None  # 'manual', 'archivo', 'generar'
        self.pendiente = None
        self.ordenada = None
        self.r_cuadrado = None
        self.resultados = None
        
    def configuracion_completa(self) -> bool:
        """Verifica si la configuraci√≥n est√° completa"""
        return (self.x_datos is not None and 
                self.y_datos is not None and 
                len(self.x_datos) >= 2)
    
    def mostrar_configuracion(self):
        """Muestra el estado actual de la configuraci√≥n"""
        config = {
            "Datos": f"{self.n_datos} puntos" if self.n_datos > 0 else None,
            "M√©todo de ingreso": self.metodo_ingreso,
            "Rango X": f"[{np.min(self.x_datos):.3f}, {np.max(self.x_datos):.3f}]" if self.x_datos is not None else None,
            "Rango Y": f"[{np.min(self.y_datos):.3f}, {np.max(self.y_datos):.3f}]" if self.y_datos is not None else None
        }
        mostrar_estado_configuracion(config)
    
    def ingresar_datos(self):
        """Men√∫ principal para ingreso de datos"""
        limpiar_pantalla()
        mostrar_titulo_principal("Regresi√≥n Lineal", "Ingreso de Datos")
        
        console.print(Panel(
            "[bold cyan]Seleccione el m√©todo para ingresar los datos[/bold cyan]\n\n"
            "[yellow]Opciones disponibles:[/yellow]\n"
            "‚Ä¢ Ingreso manual punto por punto\n"
            "‚Ä¢ Cargar desde archivo CSV/TXT\n"
            "‚Ä¢ Generar datos sint√©ticos para pruebas\n"
            "‚Ä¢ Usar datos de ejemplo predefinidos",
            title="üìä M√©todos de Ingreso de Datos",
            border_style="blue"
        ))
        
        opciones = [
            "Ingreso manual de puntos",
            "Cargar desde archivo",
            "Generar datos sint√©ticos",
            "Usar datos de ejemplo",
            "Volver al men√∫ principal"
        ]
        
        mostrar_menu_opciones(opciones, "Seleccione m√©todo de ingreso", False)
        opcion = validar_opcion_menu([1, 2, 3, 4, 5])
        
        if opcion == 1:
            self._ingresar_datos_manual()
        elif opcion == 2:
            self._cargar_desde_archivo()
        elif opcion == 3:
            self._generar_datos_sinteticos()
        elif opcion == 4:
            self._usar_datos_ejemplo()
        elif opcion == 5:
            return
    
    def _ingresar_datos_manual(self):
        """Ingreso manual de datos punto por punto"""
        limpiar_pantalla()
        mostrar_titulo_principal("Regresi√≥n Lineal", "Ingreso Manual de Datos")
        
        console.print(Panel(
            "[bold cyan]Ingreso manual de puntos (x, y)[/bold cyan]\n\n"
            "[yellow]Instrucciones:[/yellow]\n"
            "‚Ä¢ Ingrese cada punto por separado\n"
            "‚Ä¢ Se necesitan m√≠nimo 2 puntos\n"
            "‚Ä¢ M√°s puntos dan mejor ajuste\n"
            "‚Ä¢ Presione Enter vac√≠o para terminar",
            title="‚úèÔ∏è Ingreso Manual",
            border_style="yellow"
        ))
        
        puntos_x = []
        puntos_y = []
        i = 1
        
        while True:
            console.print(f"\n[cyan]Punto {i}:[/cyan]")
            
            try:
                x_input = input("  x: ").strip()
                if not x_input:
                    if len(puntos_x) >= 2:
                        break
                    else:
                        console.print("[red]‚ùå Se necesitan al menos 2 puntos[/red]")
                        continue
                
                x = float(x_input)
                y = validar_numero("  y", "float")
                
                puntos_x.append(x)
                puntos_y.append(y)
                
                console.print(f"[green]‚úì Punto ({formatear_numero(x)}, {formatear_numero(y)}) agregado[/green]")
                i += 1
                
            except ValueError:
                console.print("[red]‚ùå Valor de x inv√°lido[/red]")
        
        if len(puntos_x) >= 2:
            self.x_datos = np.array(puntos_x)
            self.y_datos = np.array(puntos_y)
            self.n_datos = len(puntos_x)
            self.metodo_ingreso = "manual"
            
            mostrar_mensaje_exito(f"‚úì {self.n_datos} puntos ingresados correctamente")
            
            # Mostrar resumen de datos
            self._mostrar_resumen_datos()
            
        esperar_enter()
    
    def _cargar_desde_archivo(self):
        """Carga datos desde archivo CSV o TXT"""
        limpiar_pantalla()
        mostrar_titulo_principal("Regresi√≥n Lineal", "Cargar desde Archivo")
        
        console.print(Panel(
            "[bold cyan]Cargar datos desde archivo[/bold cyan]\n\n"
            "[yellow]Formatos soportados:[/yellow]\n"
            "‚Ä¢ CSV: valores separados por comas\n"
            "‚Ä¢ TXT: valores separados por espacios o tabs\n"
            "‚Ä¢ Primera columna: valores X\n"
            "‚Ä¢ Segunda columna: valores Y\n"
            "‚Ä¢ Sin encabezados (solo n√∫meros)",
            title="üìÅ Carga de Archivos",
            border_style="blue"
        ))
        
        while True:
            nombre_archivo = input("\nIngrese el nombre del archivo: ").strip()
            
            if not nombre_archivo:
                console.print("[red]‚ùå Debe ingresar un nombre de archivo[/red]")
                continue
            
            try:
                # Intentar cargar como CSV primero
                if nombre_archivo.endswith('.csv'):
                    datos = pd.read_csv(nombre_archivo, header=None)
                else:
                    # Cargar como archivo delimitado por espacios/tabs
                    datos = pd.read_csv(nombre_archivo, sep=r'\s+', header=None)
                
                if datos.shape[1] < 2:
                    mostrar_mensaje_error("El archivo debe tener al menos 2 columnas (X, Y)")
                    continue
                
                if datos.shape[0] < 2:
                    mostrar_mensaje_error("El archivo debe tener al menos 2 filas de datos")
                    continue
                
                # Tomar las primeras dos columnas
                self.x_datos = datos.iloc[:, 0].values
                self.y_datos = datos.iloc[:, 1].values
                self.n_datos = len(self.x_datos)
                self.metodo_ingreso = "archivo"
                
                mostrar_mensaje_exito(f"‚úì {self.n_datos} puntos cargados desde {nombre_archivo}")
                
                # Mostrar resumen de datos
                self._mostrar_resumen_datos()
                break
                
            except FileNotFoundError:
                mostrar_mensaje_error(f"Archivo '{nombre_archivo}' no encontrado")
                if not confirmar_accion("¬øDesea intentar con otro archivo?"):
                    break
            except Exception as e:
                mostrar_mensaje_error(f"Error al cargar archivo: {e}")
                if not confirmar_accion("¬øDesea intentar con otro archivo?"):
                    break
        
        esperar_enter()
    
    def _generar_datos_sinteticos(self):
        """Genera datos sint√©ticos para pruebas"""
        limpiar_pantalla()
        mostrar_titulo_principal("Regresi√≥n Lineal", "Datos Sint√©ticos")
        
        console.print(Panel(
            "[bold cyan]Generaci√≥n de datos sint√©ticos[/bold cyan]\n\n"
            "[yellow]Par√°metros de la recta real:[/yellow]\n"
            "y = mx + b + ruido\n\n"
            "Donde el ruido sigue una distribuci√≥n normal",
            title="üé≤ Generador de Datos",
            border_style="green"
        ))
        
        # Configurar par√°metros
        m_real = validar_numero("Pendiente real (m)", "float")
        b_real = validar_numero("Ordenada real (b)", "float")
        n_puntos = validar_numero("N√∫mero de puntos", "int", min_val=5, max_val=1000)
        x_min = validar_numero("X m√≠nimo", "float")
        x_max = validar_numero("X m√°ximo", "float")
        
        if x_min >= x_max:
            mostrar_mensaje_error("X m√°ximo debe ser mayor que X m√≠nimo")
            esperar_enter()
            return
        
        ruido_std = validar_numero("Desviaci√≥n est√°ndar del ruido", "float", min_val=0)
        
        # Generar datos
        np.random.seed(42)  # Para reproducibilidad
        self.x_datos = np.linspace(x_min, x_max, n_puntos)
        y_teorico = m_real * self.x_datos + b_real
        ruido = np.random.normal(0, ruido_std, n_puntos)
        self.y_datos = y_teorico + ruido
        
        self.n_datos = n_puntos
        self.metodo_ingreso = "sint√©tico"
        
        mostrar_mensaje_exito(f"‚úì {n_puntos} puntos generados con y = {m_real}x + {b_real} + ruido")
        
        # Mostrar par√°metros reales para comparaci√≥n
        console.print(Panel(
            f"[bold yellow]Par√°metros reales (para comparaci√≥n):[/bold yellow]\n"
            f"Pendiente: {m_real}\n"
            f"Ordenada: {b_real}\n"
            f"Ruido: œÉ = {ruido_std}",
            title="üìä Valores Te√≥ricos",
            border_style="yellow"
        ))
        
        # Mostrar resumen de datos
        self._mostrar_resumen_datos()
        esperar_enter()
    
    def _usar_datos_ejemplo(self):
        """Usa conjuntos de datos de ejemplo predefinidos"""
        limpiar_pantalla()
        mostrar_titulo_principal("Regresi√≥n Lineal", "Datos de Ejemplo")
        
        ejemplos = {
            1: {
                "nombre": "Temperatura vs Ventas de helado",
                "x": [20, 25, 30, 35, 40, 45, 50],
                "y": [10, 15, 25, 35, 50, 65, 80],
                "descripcion": "Relaci√≥n positiva fuerte"
            },
            2: {
                "nombre": "A√±os de experiencia vs Salario",
                "x": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                "y": [30, 35, 38, 42, 48, 52, 58, 64, 70, 75],
                "descripcion": "Crecimiento casi lineal"
            },
            3: {
                "nombre": "Precio vs Demanda",
                "x": [10, 15, 20, 25, 30, 35, 40],
                "y": [100, 85, 70, 55, 40, 25, 10],
                "descripcion": "Relaci√≥n negativa"
            },
            4: {
                "nombre": "Datos con ruido moderado",
                "x": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                "y": [2.1, 3.9, 6.2, 7.8, 10.1, 11.8, 14.2, 15.9, 18.1, 19.8],
                "descripcion": "Relaci√≥n lineal con ruido"
            }
        }
        
        # Mostrar ejemplos disponibles
        table = Table(title="Conjuntos de Datos de Ejemplo", border_style="green")
        table.add_column("Opci√≥n", style="cyan", width=8)
        table.add_column("Nombre", style="yellow")
        table.add_column("Puntos", style="white", width=8)
        table.add_column("Descripci√≥n", style="dim")
        
        for key, ejemplo in ejemplos.items():
            table.add_row(
                str(key),
                ejemplo["nombre"],
                str(len(ejemplo["x"])),
                ejemplo["descripcion"]
            )
        
        console.print(table)
        
        opciones_validas = list(ejemplos.keys()) + [len(ejemplos) + 1]
        console.print(f"\n[dim]{len(ejemplos) + 1}. Volver al men√∫ anterior[/dim]")
        
        opcion = validar_opcion_menu(opciones_validas, "Seleccione un ejemplo")
        
        if opcion in ejemplos:
            ejemplo = ejemplos[opcion]
            self.x_datos = np.array(ejemplo["x"])
            self.y_datos = np.array(ejemplo["y"])
            self.n_datos = len(ejemplo["x"])
            self.metodo_ingreso = "ejemplo"
            
            mostrar_mensaje_exito(f"‚úì Cargado: {ejemplo['nombre']}")
            
            # Mostrar resumen de datos
            self._mostrar_resumen_datos()
            esperar_enter()
    
    def _mostrar_resumen_datos(self):
        """Muestra un resumen de los datos cargados"""
        if self.x_datos is None or self.y_datos is None:
            return
        
        console.print("\n" + "="*60)
        mostrar_estadisticas_datos(self.x_datos, self.y_datos)
        
        if confirmar_accion("¬øDesea ver los primeros datos?"):
            mostrar_tabla_datos(self.x_datos, self.y_datos, "Datos Cargados", max_filas=10)
        
        if confirmar_accion("¬øDesea ver una gr√°fica de dispersi√≥n?"):
            try:
                plt.figure(figsize=(10, 6))
                plt.scatter(self.x_datos, self.y_datos, alpha=0.7, s=50)
                plt.xlabel('X')
                plt.ylabel('Y')
                plt.title('Gr√°fica de Dispersi√≥n de los Datos')
                plt.grid(True, alpha=0.3)
                plt.tight_layout()
                plt.show()
            except Exception as e:
                mostrar_mensaje_error(f"Error al mostrar gr√°fica: {e}")
    
    def calcular_regresion(self):
        """Calcula la regresi√≥n lineal usando m√≠nimos cuadrados"""
        if not self.configuracion_completa():
            mostrar_mensaje_error("No hay datos suficientes para calcular la regresi√≥n")
            esperar_enter()
            return
        
        limpiar_pantalla()
        mostrar_titulo_principal("Regresi√≥n Lineal", "C√°lculo de Regresi√≥n")
        
        self.mostrar_configuracion()
        
        if not confirmar_accion("¬øDesea calcular la regresi√≥n lineal?"):
            return
        
        mostrar_progreso_ejecucion("Calculando regresi√≥n lineal por m√≠nimos cuadrados...")
        
        tiempo_inicio = time.time()
        
        # C√°lculos de regresi√≥n lineal
        n = len(self.x_datos)
        
        # Sumas necesarias
        sum_x = np.sum(self.x_datos)
        sum_y = np.sum(self.y_datos)
        sum_xy = np.sum(self.x_datos * self.y_datos)
        sum_x2 = np.sum(self.x_datos**2)
        sum_y2 = np.sum(self.y_datos**2)
        
        # Medias
        mean_x = sum_x / n
        mean_y = sum_y / n
        
        # C√°lculo de pendiente (m) y ordenada (b)
        denominador = n * sum_x2 - sum_x**2
        
        if abs(denominador) < 1e-15:
            mostrar_mensaje_error("Error: denominador muy peque√±o. Los datos X son constantes.")
            esperar_enter()
            return
        
        self.pendiente = (n * sum_xy - sum_x * sum_y) / denominador
        self.ordenada = (sum_y - self.pendiente * sum_x) / n
        
        # C√°lculo del coeficiente de determinaci√≥n R¬≤
        y_pred = self.pendiente * self.x_datos + self.ordenada
        ss_res = np.sum((self.y_datos - y_pred)**2)  # Suma de cuadrados residuales
        ss_tot = np.sum((self.y_datos - mean_y)**2)   # Suma total de cuadrados
        
        if abs(ss_tot) < 1e-15:
            self.r_cuadrado = 1.0  # Todos los Y son iguales
        else:
            self.r_cuadrado = 1 - (ss_res / ss_tot)
        
        # Estad√≠sticas adicionales
        residuos = self.y_datos - y_pred
        error_estandar = np.sqrt(ss_res / (n - 2)) if n > 2 else 0
        
        # Correlaci√≥n de Pearson
        correlacion = np.corrcoef(self.x_datos, self.y_datos)[0, 1]
        
        # Intervalos de confianza para los coeficientes (aproximados)
        s_xx = sum_x2 - (sum_x**2 / n)
        error_m = error_estandar / np.sqrt(s_xx) if s_xx > 0 else 0
        error_b = error_estandar * np.sqrt(1/n + mean_x**2/s_xx) if s_xx > 0 else 0
        
        tiempo_ejecucion = time.time() - tiempo_inicio
        
        # Preparar resultados
        self.resultados = {
            "pendiente": self.pendiente,
            "ordenada": self.ordenada,
            "r_cuadrado": self.r_cuadrado,
            "correlacion": correlacion,
            "error_estandar": error_estandar,
            "residuos": residuos,
            "y_predichos": y_pred,
            "suma_residuos_cuadrados": ss_res,
            "suma_total_cuadrados": ss_tot,
            "error_pendiente": error_m,
            "error_ordenada": error_b,
            "tiempo_ejecucion": tiempo_ejecucion,
            "estadisticas": {
                "n_puntos": n,
                "sum_x": sum_x,
                "sum_y": sum_y,
                "sum_xy": sum_xy,
                "sum_x2": sum_x2,
                "sum_y2": sum_y2,
                "mean_x": mean_x,
                "mean_y": mean_y
            }
        }
        
        mostrar_mensaje_exito("¬°Regresi√≥n calculada exitosamente!")
        esperar_enter()
    
    def mostrar_resultados(self):
        """Muestra los resultados de la regresi√≥n"""
        if self.resultados is None:
            mostrar_mensaje_error("No hay resultados disponibles. Calcule la regresi√≥n primero.")
            esperar_enter()
            return
        
        limpiar_pantalla()
        mostrar_titulo_principal("Regresi√≥n Lineal", "Resultados")
        
        # Ecuaci√≥n de la recta
        m, b = self.pendiente, self.ordenada
        signo = "+" if b >= 0 else "-"
        ecuacion = f"y = {formatear_numero(m)}x {signo} {formatear_numero(abs(b))}"
        
        console.print(Panel(
            f"[bold green]{ecuacion}[/bold green]",
            title="üìà Ecuaci√≥n de la Recta Ajustada",
            border_style="green"
        ))
        
        # Mostrar resultado principal
        resultado_display = {
            "pendiente_m": self.pendiente,
            "ordenada_b": self.ordenada,
            "r_cuadrado": self.r_cuadrado,
            "correlacion": self.resultados["correlacion"],
            "error_estandar": self.resultados["error_estandar"],
            "puntos_datos": self.n_datos
        }
        
        mostrar_resultado_final("Regresi√≥n Lineal", resultado_display, self.resultados["tiempo_ejecucion"])
        
        # Interpretaci√≥n del R¬≤
        r2 = self.r_cuadrado
        if r2 > 0.9:
            interpretacion = "Excelente ajuste"
            color = "green"
        elif r2 > 0.7:
            interpretacion = "Buen ajuste"
            color = "yellow"
        elif r2 > 0.5:
            interpretacion = "Ajuste moderado"
            color = "orange"
        else:
            interpretacion = "Ajuste pobre"
            color = "red"
        
        console.print(Panel(
            f"[bold {color}]R¬≤ = {formatear_numero(r2)} ({interpretacion})[/bold {color}]\n\n"
            f"Esto significa que el {formatear_numero(r2*100)}% de la variabilidad\n"
            f"en Y es explicada por la relaci√≥n lineal con X.",
            title="üìä Interpretaci√≥n del Ajuste",
            border_style=color
        ))
        
        # Men√∫ de opciones para resultados
        opciones = [
            "Ver gr√°fica de regresi√≥n",
            "Ver an√°lisis de residuos",
            "Ver estad√≠sticas detalladas",
            "Hacer predicciones",
            "Exportar resultados",
            "Volver al men√∫ principal"
        ]
        
        mostrar_menu_opciones(opciones, "Opciones de resultados", False)
        opcion = validar_opcion_menu([1, 2, 3, 4, 5, 6])
        
        if opcion == 1:
            self.mostrar_grafica_regresion()
        elif opcion == 2:
            self.analizar_residuos()
        elif opcion == 3:
            self.mostrar_estadisticas_detalladas()
        elif opcion == 4:
            self.hacer_predicciones()
        elif opcion == 5:
            self.exportar_resultados()
        elif opcion == 6:
            return
    
    def mostrar_grafica_regresion(self):
        """Muestra la gr√°fica de regresi√≥n con datos y recta ajustada"""
        console.print("[yellow]Generando gr√°fica de regresi√≥n...[/yellow]")
        
        try:
            # Crear puntos para la recta ajustada
            x_min, x_max = np.min(self.x_datos), np.max(self.x_datos)
            margen = (x_max - x_min) * 0.1
            x_ajuste = np.linspace(x_min - margen, x_max + margen, 100)
            y_ajuste = self.pendiente * x_ajuste + self.ordenada
            
            # Ecuaci√≥n para el t√≠tulo
            m, b = self.pendiente, self.ordenada
            signo = "+" if b >= 0 else "-"
            ecuacion = f"y = {formatear_numero(m)}x {signo} {formatear_numero(abs(b))}"
            titulo = f"Regresi√≥n Lineal: {ecuacion} (R¬≤ = {formatear_numero(self.r_cuadrado)})"
            
            graficar_regresion(
                self.x_datos,
                self.y_datos,
                x_ajuste,
                y_ajuste,
                titulo,
                "Datos observados",
                f"Ajuste lineal (R¬≤ = {formatear_numero(self.r_cuadrado)})"
            )
            
        except Exception as e:
            mostrar_mensaje_error(f"Error al generar gr√°fica: {e}")
        
        esperar_enter()
    
    def analizar_residuos(self):
        """Analiza los residuos para validar el modelo"""
        limpiar_pantalla()
        mostrar_titulo_principal("Regresi√≥n Lineal", "An√°lisis de Residuos")
        
        residuos = self.resultados["residuos"]
        y_pred = self.resultados["y_predichos"]
        
        # Estad√≠sticas de residuos
        media_residuos = np.mean(residuos)
        std_residuos = np.std(residuos)
        residuo_max = np.max(np.abs(residuos))
        
        console.print(Panel(
            f"[bold cyan]Estad√≠sticas de Residuos[/bold cyan]\n\n"
            f"Media: {formatear_numero(media_residuos)} (ideal: ‚âà 0)\n"
            f"Desviaci√≥n est√°ndar: {formatear_numero(std_residuos)}\n"
            f"Residuo m√°ximo: {formatear_numero(residuo_max)}\n"
            f"Error est√°ndar: {formatear_numero(self.resultados['error_estandar'])}",
            title="üìä An√°lisis de Residuos",
            border_style="blue"
        ))
        
        # Gr√°ficas de residuos
        if confirmar_accion("¬øDesea ver las gr√°ficas de residuos?"):
            try:
                fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 12))
                
                # 1. Residuos vs Valores predichos
                ax1.scatter(y_pred, residuos, alpha=0.7)
                ax1.axhline(y=0, color='red', linestyle='--')
                ax1.set_xlabel('Valores Predichos')
                ax1.set_ylabel('Residuos')
                ax1.set_title('Residuos vs Valores Predichos')
                ax1.grid(True, alpha=0.3)
                
                # 2. Residuos vs Valores X
                ax2.scatter(self.x_datos, residuos, alpha=0.7)
                ax2.axhline(y=0, color='red', linestyle='--')
                ax2.set_xlabel('Valores X')
                ax2.set_ylabel('Residuos')
                ax2.set_title('Residuos vs Valores X')
                ax2.grid(True, alpha=0.3)
                
                # 3. Histograma de residuos
                ax3.hist(residuos, bins=min(10, len(residuos)//2), alpha=0.7, edgecolor='black')
                ax3.set_xlabel('Residuos')
                ax3.set_ylabel('Frecuencia')
                ax3.set_title('Distribuci√≥n de Residuos')
                ax3.grid(True, alpha=0.3)
                
                # 4. Q-Q plot (aproximado)
                residuos_ordenados = np.sort(residuos)
                n = len(residuos_ordenados)
                teoricos = np.random.normal(0, std_residuos, n)
                teoricos = np.sort(teoricos)
                
                ax4.scatter(teoricos, residuos_ordenados, alpha=0.7)
                # L√≠nea de referencia
                min_val = min(np.min(teoricos), np.min(residuos_ordenados))
                max_val = max(np.max(teoricos), np.max(residuos_ordenados))
                ax4.plot([min_val, max_val], [min_val, max_val], 'r--')
                ax4.set_xlabel('Cuantiles Te√≥ricos')
                ax4.set_ylabel('Cuantiles Observados')
                ax4.set_title('Q-Q Plot (Normalidad)')
                ax4.grid(True, alpha=0.3)
                
                plt.tight_layout()
                plt.show()
                
            except Exception as e:
                mostrar_mensaje_error(f"Error al generar gr√°ficas: {e}")
        
        esperar_enter()
    
    def mostrar_estadisticas_detalladas(self):
        """Muestra estad√≠sticas detalladas del ajuste"""
        limpiar_pantalla()
        mostrar_titulo_principal("Regresi√≥n Lineal", "Estad√≠sticas Detalladas")
        
        # Crear layout con dos paneles
        layout = Layout()
        layout.split_row(
            Layout(name="coeficientes"),
            Layout(name="ajuste")
        )
        
        # Panel de coeficientes
        coef_table = Table(title="Coeficientes de Regresi√≥n", border_style="blue")
        coef_table.add_column("Coeficiente", style="cyan")
        coef_table.add_column("Valor", style="white")
        coef_table.add_column("Error Est√°ndar", style="yellow")
        
        coef_table.add_row("Pendiente (m)", formatear_numero(self.pendiente), formatear_numero(self.resultados["error_pendiente"]))
        coef_table.add_row("Ordenada (b)", formatear_numero(self.ordenada), formatear_numero(self.resultados["error_ordenada"]))
        
        # Panel de bondad de ajuste
        ajuste_table = Table(title="Bondad de Ajuste", border_style="green")
        ajuste_table.add_column("Estad√≠stica", style="cyan")
        ajuste_table.add_column("Valor", style="white")
        
        ajuste_table.add_row("R¬≤", formatear_numero(self.r_cuadrado))
        ajuste_table.add_row("R (correlaci√≥n)", formatear_numero(self.resultados["correlacion"]))
        ajuste_table.add_row("Error est√°ndar", formatear_numero(self.resultados["error_estandar"]))
        ajuste_table.add_row("SSR (residuos)", formatear_numero(self.resultados["suma_residuos_cuadrados"]))
        ajuste_table.add_row("SST (total)", formatear_numero(self.resultados["suma_total_cuadrados"]))
        
        layout["coeficientes"].update(coef_table)
        layout["ajuste"].update(ajuste_table)
        
        console.print(layout)
        console.print()
        
        # Tabla de sumas para c√°lculos
        sumas_table = Table(title="Sumas para C√°lculos", border_style="yellow")
        sumas_table.add_column("Suma", style="cyan")
        sumas_table.add_column("Valor", style="white")
        
        stats = self.resultados["estadisticas"]
        sumas_table.add_row("n (puntos)", str(stats["n_puntos"]))
        sumas_table.add_row("Œ£x", formatear_numero(stats["sum_x"]))
        sumas_table.add_row("Œ£y", formatear_numero(stats["sum_y"]))
        sumas_table.add_row("Œ£xy", formatear_numero(stats["sum_xy"]))
        sumas_table.add_row("Œ£x¬≤", formatear_numero(stats["sum_x2"]))
        sumas_table.add_row("xÃÑ (media)", formatear_numero(stats["mean_x"]))
        sumas_table.add_row("»≥ (media)", formatear_numero(stats["mean_y"]))
        
        console.print(sumas_table)
        
        esperar_enter()
    
    def hacer_predicciones(self):
        """Permite hacer predicciones con el modelo"""
        limpiar_pantalla()
        mostrar_titulo_principal("Regresi√≥n Lineal", "Predicciones")
        
        m, b = self.pendiente, self.ordenada
        signo = "+" if b >= 0 else "-"
        ecuacion = f"y = {formatear_numero(m)}x {signo} {formatear_numero(abs(b))}"
        
        console.print(Panel(
            f"[bold green]Modelo: {ecuacion}[/bold green]\n"
            f"R¬≤ = {formatear_numero(self.r_cuadrado)}",
            title="üìà Modelo de Predicci√≥n",
            border_style="green"
        ))
        
        while True:
            opciones = [
                "Predecir Y para un valor X",
                "Predecir X para un valor Y",
                "Predicciones m√∫ltiples",
                "Volver al men√∫ de resultados"
            ]
            
            mostrar_menu_opciones(opciones, "Tipo de predicci√≥n", False)
            opcion = validar_opcion_menu([1, 2, 3, 4])
            
            if opcion == 1:
                x_pred = validar_numero("Ingrese el valor de X para predecir Y", "float")
                y_pred = self.pendiente * x_pred + self.ordenada
                
                console.print(Panel(
                    f"[bold cyan]Para X = {formatear_numero(x_pred)}:[/bold cyan]\n"
                    f"Y predicho = {formatear_numero(y_pred)}",
                    title="üéØ Predicci√≥n Y",
                    border_style="cyan"
                ))
                
            elif opcion == 2:
                if abs(self.pendiente) < 1e-15:
                    mostrar_mensaje_error("No se puede predecir X cuando la pendiente es cero")
                else:
                    y_pred = validar_numero("Ingrese el valor de Y para predecir X", "float")
                    x_pred = (y_pred - self.ordenada) / self.pendiente
                    
                    console.print(Panel(
                        f"[bold cyan]Para Y = {formatear_numero(y_pred)}:[/bold cyan]\n"
                        f"X predicho = {formatear_numero(x_pred)}",
                        title="üéØ Predicci√≥n X",
                        border_style="cyan"
                    ))
                    
            elif opcion == 3:
                self._predicciones_multiples()
                
            elif opcion == 4:
                break
            
            if opcion != 4:
                esperar_enter()
    
    def _predicciones_multiples(self):
        """Realiza m√∫ltiples predicciones"""
        console.print("\n[yellow]Predicciones m√∫ltiples - Ingrese valores separados por comas[/yellow]")
        
        valores_input = input("Valores de X: ").strip()
        
        try:
            valores_x = [float(x.strip()) for x in valores_input.split(',')]
            
            table = Table(title="Predicciones M√∫ltiples", border_style="green")
            table.add_column("X", style="cyan")
            table.add_column("Y Predicho", style="white")
            
            for x_val in valores_x:
                y_pred = self.pendiente * x_val + self.ordenada
                table.add_row(formatear_numero(x_val), formatear_numero(y_pred))
            
            console.print(table)
            
        except ValueError:
            mostrar_mensaje_error("Error en el formato de los valores. Use n√∫meros separados por comas.")
    
    def exportar_resultados(self):
        """Exporta los resultados a archivos"""
        limpiar_pantalla()
        mostrar_titulo_principal("Regresi√≥n Lineal", "Exportar Resultados")
        
        opciones = [
            "Exportar resumen a TXT",
            "Exportar datos y predicciones a CSV",
            "Exportar todo (TXT + CSV)",
            "Volver al men√∫ de resultados"
        ]
        
        mostrar_menu_opciones(opciones, "Formato de exportaci√≥n", False)
        opcion = validar_opcion_menu([1, 2, 3, 4])
        
        if opcion == 4:
            return
        
        timestamp = int(time.time())
        
        try:
            if opcion in [1, 3]:
                # Exportar resumen TXT
                nombre_txt = f"regresion_lineal_resumen_{timestamp}.txt"
                self._exportar_resumen_txt(nombre_txt)
                
            if opcion in [2, 3]:
                # Exportar datos CSV
                nombre_csv = f"regresion_lineal_datos_{timestamp}.csv"
                self._exportar_datos_csv(nombre_csv)
                
            mostrar_mensaje_exito("Archivos exportados exitosamente")
            
        except Exception as e:
            mostrar_mensaje_error(f"Error al exportar: {e}")
        
        esperar_enter()
    
    def _exportar_resumen_txt(self, nombre_archivo):
        """Exporta resumen completo a TXT"""
        with open(nombre_archivo, 'w', encoding='utf-8') as f:
            f.write("RESULTADOS DE REGRESI√ìN LINEAL\n")
            f.write("=" * 50 + "\n\n")
            
            # Ecuaci√≥n
            m, b = self.pendiente, self.ordenada
            signo = "+" if b >= 0 else "-"
            f.write(f"ECUACI√ìN DE LA RECTA: y = {formatear_numero(m)}x {signo} {formatear_numero(abs(b))}\n\n")
            
            # Coeficientes
            f.write("COEFICIENTES:\n")
            f.write(f"Pendiente (m): {formatear_numero(self.pendiente)}\n")
            f.write(f"Ordenada (b): {formatear_numero(self.ordenada)}\n")
            f.write(f"Error est√°ndar de m: {formatear_numero(self.resultados['error_pendiente'])}\n")
            f.write(f"Error est√°ndar de b: {formatear_numero(self.resultados['error_ordenada'])}\n\n")
            
            # Bondad de ajuste
            f.write("BONDAD DE AJUSTE:\n")
            f.write(f"R¬≤ (coeficiente de determinaci√≥n): {formatear_numero(self.r_cuadrado)}\n")
            f.write(f"R (correlaci√≥n): {formatear_numero(self.resultados['correlacion'])}\n")
            f.write(f"Error est√°ndar: {formatear_numero(self.resultados['error_estandar'])}\n\n")
            
            # Estad√≠sticas
            stats = self.resultados["estadisticas"]
            f.write("ESTAD√çSTICAS:\n")
            f.write(f"N√∫mero de puntos: {stats['n_puntos']}\n")
            f.write(f"Media de X: {formatear_numero(stats['mean_x'])}\n")
            f.write(f"Media de Y: {formatear_numero(stats['mean_y'])}\n")
            f.write(f"Suma de cuadrados residuales: {formatear_numero(self.resultados['suma_residuos_cuadrados'])}\n")
            f.write(f"Suma total de cuadrados: {formatear_numero(self.resultados['suma_total_cuadrados'])}\n")
            
        console.print(f"[green]Resumen exportado a: {nombre_archivo}[/green]")
    
    def _exportar_datos_csv(self, nombre_archivo):
        """Exporta datos y predicciones a CSV"""
        df = pd.DataFrame({
            'X': self.x_datos,
            'Y_Observado': self.y_datos,
            'Y_Predicho': self.resultados['y_predichos'],
            'Residuo': self.resultados['residuos']
        })
        
        df.to_csv(nombre_archivo, index=False)
        console.print(f"[green]Datos exportados a: {nombre_archivo}[/green]")
    
    def mostrar_ayuda(self):
        """Muestra informaci√≥n de ayuda sobre regresi√≥n lineal"""
        mostrar_ayuda_metodo(
            "Regresi√≥n Lineal",
            "La regresi√≥n lineal encuentra la mejor recta que se ajusta a un conjunto de datos "
            "usando el m√©todo de m√≠nimos cuadrados. Minimiza la suma de cuadrados de las "
            "diferencias entre valores observados y predichos.",
            [
                "Modelar relaciones lineales entre variables",
                "Predicci√≥n de valores futuros",
                "An√°lisis de tendencias en datos",
                "Base para modelos m√°s complejos",
                "Control de calidad en procesos",
                "An√°lisis financiero y econ√≥mico"
            ],
            [
                "F√°cil de interpretar y explicar",
                "C√°lculos simples y r√°pidos",
                "Buena base estad√≠stica",
                "Permite predicciones",
                "Funciona bien con relaciones lineales",
                "Proporciona medidas de bondad de ajuste"
            ],
            [
                "Solo modela relaciones lineales",
                "Sensible a valores at√≠picos",
                "Asume homocedasticidad",
                "Requiere independencia de residuos",
                "No funciona bien con datos no lineales"
            ]
        )

def main():
    """Funci√≥n principal del programa"""
    regresion = RegresionLineal()
    
    while True:
        limpiar_pantalla()
        mostrar_titulo_principal(
            "REGRESI√ìN LINEAL",
            "Ajuste de recta por m√≠nimos cuadrados"
        )
        
        mostrar_banner_metodo(
            "Regresi√≥n Lineal",
            "Encuentra la mejor recta y = mx + b que se ajusta a los datos"
        )
        
        regresion.mostrar_configuracion()
        
        opciones = [
            "Ingresar/cargar datos",
            "Calcular regresi√≥n lineal",
            "Ver resultados y an√°lisis",
            "Ver ayuda del m√©todo",
            "Salir"
        ]
        
        mostrar_menu_opciones(opciones)
        opcion = validar_opcion_menu([1, 2, 3, 4, 5])
        
        if opcion == 1:
            regresion.ingresar_datos()
        elif opcion == 2:
            regresion.calcular_regresion()
        elif opcion == 3:
            regresion.mostrar_resultados()
        elif opcion == 4:
            regresion.mostrar_ayuda()
        elif opcion == 5:
            console.print("\n[green]¬°Gracias por usar regresi√≥n lineal![/green]")
            break

if __name__ == "__main__":
    main()
