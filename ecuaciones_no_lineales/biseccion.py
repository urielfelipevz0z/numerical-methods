#!/usr/bin/env python3
"""
M√©todo de Bisecci√≥n - Implementaci√≥n con men√∫s interactivos
Encuentra ra√≠ces de ecuaciones no lineales mediante b√∫squeda binaria en un intervalo
"""

import sys
import os
import time
import numpy as np
import matplotlib.pyplot as plt
import sympy as sp
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from tqdm import tqdm

# Agregar directorio padre al path para imports
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from utilidades import (
    validar_numero, validar_opcion_menu, validar_funcion, validar_intervalo,
    validar_tolerancia, validar_max_iteraciones, confirmar_accion,
    limpiar_pantalla, mostrar_titulo_principal, mostrar_menu_opciones,
    mostrar_banner_metodo, mostrar_estado_configuracion, mostrar_progreso_ejecucion,
    mostrar_resultado_final, mostrar_mensaje_error, mostrar_mensaje_exito,
    mostrar_ayuda_metodo, esperar_enter,
    crear_tabla_iteraciones, formatear_numero,
    graficar_funcion, graficar_convergencia_biseccion
)

console = Console()

class MetodoBiseccion:
    def __init__(self):
        self.funcion = None
        self.funcion_str = ""
        self.a = None
        self.b = None
        self.tolerancia = 1e-6
        self.max_iteraciones = 100
        self.resultados = None
        
    def configuracion_completa(self) -> bool:
        """Verifica si la configuraci√≥n est√° completa"""
        return all([
            self.funcion is not None,
            self.a is not None,
            self.b is not None,
            self.tolerancia is not None,
            self.max_iteraciones is not None
        ])
    
    def mostrar_configuracion(self):
        """Muestra el estado actual de la configuraci√≥n"""
        config = {
            "Funci√≥n": self.funcion_str if self.funcion_str else None,
            "Intervalo [a,b]": f"[{self.a}, {self.b}]" if self.a is not None and self.b is not None else None,
            "Tolerancia": self.tolerancia,
            "M√°x. Iteraciones": self.max_iteraciones
        }
        mostrar_estado_configuracion(config)
    
    def ingresar_funcion(self):
        """Men√∫ para ingresar la funci√≥n"""
        limpiar_pantalla()
        mostrar_titulo_principal("M√©todo de Bisecci√≥n", "Ingreso de Funci√≥n")
        
        console.print(Panel(
            "[bold cyan]Ingrese la funci√≥n f(x) = 0[/bold cyan]\n\n"
            "Ejemplos v√°lidos:\n"
            "‚Ä¢ x**2 - 4\n"
            "‚Ä¢ sin(x) - 0.5\n"
            "‚Ä¢ exp(x) - 2*x\n"
            "‚Ä¢ x**3 - 2*x - 5\n\n"
            "[yellow]Funciones disponibles:[/yellow]\n"
            "sin, cos, tan, exp, log, ln, sqrt, abs",
            title="üí° Ayuda para Funciones",
            border_style="blue"
        ))
        
        while True:
            funcion_input = input("\nIngrese f(x): ").strip()
            
            if not funcion_input:
                console.print("[red]‚ùå La funci√≥n no puede estar vac√≠a[/red]")
                continue
            
            es_valida, expr, error = validar_funcion(funcion_input)
            
            if es_valida:
                self.funcion = expr
                self.funcion_str = funcion_input
                mostrar_mensaje_exito(f"Funci√≥n ingresada: f(x) = {funcion_input}")
                
                # Mostrar gr√°fica de la funci√≥n
                if confirmar_accion("¬øDesea ver la gr√°fica de la funci√≥n?"):
                    try:
                        # Estimar rango autom√°ticamente o usar uno por defecto
                        rango = (-10, 10)
                        if self.a is not None and self.b is not None:
                            margen = abs(self.b - self.a)
                            rango = (self.a - margen, self.b + margen)
                        
                        graficar_funcion(self.funcion, rango, f"f(x) = {self.funcion_str}")
                    except Exception as e:
                        mostrar_mensaje_error(f"Error al graficar: {e}")
                
                esperar_enter()
                break
            else:
                mostrar_mensaje_error(f"Error en la funci√≥n: {error}")
    
    def ingresar_intervalo(self):
        """Men√∫ para ingresar el intervalo [a,b]"""
        limpiar_pantalla()
        mostrar_titulo_principal("M√©todo de Bisecci√≥n", "Configuraci√≥n de Intervalo")
        
        if self.funcion is None:
            mostrar_mensaje_error("Primero debe ingresar una funci√≥n")
            esperar_enter()
            return
        
        console.print(Panel(
            "[bold cyan]Ingrese el intervalo [a,b] donde buscar la ra√≠z[/bold cyan]\n\n"
            "[yellow]Requisitos:[/yellow]\n"
            "‚Ä¢ a < b\n"
            "‚Ä¢ f(a) y f(b) deben tener signos opuestos\n"
            "‚Ä¢ La funci√≥n debe ser continua en [a,b]",
            title="üìè Configuraci√≥n de Intervalo",
            border_style="yellow"
        ))
        
        while True:
            self.a = validar_numero("Ingrese el extremo izquierdo (a)", "float")
            self.b = validar_numero("Ingrese el extremo derecho (b)", "float")
            
            # Validar intervalo
            es_valido, error = validar_intervalo(self.a, self.b)
            if not es_valido:
                mostrar_mensaje_error(error)
                continue
            
            # Evaluar funci√≥n en los extremos
            try:
                x = sp.Symbol('x')
                fa = float(self.funcion.subs(x, self.a))
                fb = float(self.funcion.subs(x, self.b))
                
                console.print(f"\n[cyan]f({self.a}) = {formatear_numero(fa)}[/cyan]")
                console.print(f"[cyan]f({self.b}) = {formatear_numero(fb)}[/cyan]")
                
                # Verificar cambio de signo
                if fa * fb > 0:
                    mostrar_mensaje_error(
                        "f(a) y f(b) tienen el mismo signo.\n"
                        "No se garantiza que exista una ra√≠z en este intervalo."
                    )
                    if not confirmar_accion("¬øDesea continuar de todas formas?"):
                        continue
                else:
                    mostrar_mensaje_exito("‚úÖ Se detect√≥ cambio de signo - hay al menos una ra√≠z")
                
                # Mostrar gr√°fica del intervalo
                if confirmar_accion("¬øDesea ver la gr√°fica en el intervalo?"):
                    try:
                        margen = abs(self.b - self.a) * 0.2
                        rango = (self.a - margen, self.b + margen)
                        puntos_especiales = [
                            (self.a, fa, f"a={self.a}", "red"),
                            (self.b, fb, f"b={self.b}", "green")
                        ]
                        graficar_funcion(
                            self.funcion, 
                            rango, 
                            f"f(x) = {self.funcion_str} en [{self.a}, {self.b}]",
                            puntos_especiales
                        )
                    except Exception as e:
                        mostrar_mensaje_error(f"Error al graficar: {e}")
                
                esperar_enter()
                break
                
            except Exception as e:
                mostrar_mensaje_error(f"Error al evaluar la funci√≥n: {e}")
    
    def configurar_parametros(self):
        """Men√∫ para configurar tolerancia y m√°ximo de iteraciones"""
        limpiar_pantalla()
        mostrar_titulo_principal("M√©todo de Bisecci√≥n", "Configuraci√≥n de Par√°metros")
        
        console.print(Panel(
            f"[bold cyan]Configuraci√≥n actual:[/bold cyan]\n\n"
            f"Tolerancia: {self.tolerancia}\n"
            f"M√°ximo de iteraciones: {self.max_iteraciones}",
            title="‚öôÔ∏è Par√°metros Actuales",
            border_style="cyan"
        ))
        
        opciones = [
            "Cambiar tolerancia",
            "Cambiar m√°ximo de iteraciones",
            "Restaurar valores por defecto",
            "Volver al men√∫ principal"
        ]
        
        mostrar_menu_opciones(opciones, "Configurar par√°metros", False)
        opcion = validar_opcion_menu([1, 2, 3, 4])
        
        if opcion == 1:
            console.print("\n[yellow]La tolerancia determina cu√°ndo parar las iteraciones[/yellow]")
            nueva_tol = validar_numero(
                f"Nueva tolerancia (actual: {self.tolerancia})", 
                "float", 
                min_val=1e-15, 
                max_val=1.0,
                excluir_cero=True
            )
            
            es_valida, error = validar_tolerancia(nueva_tol)
            if es_valida:
                self.tolerancia = nueva_tol
                mostrar_mensaje_exito(f"Tolerancia actualizada: {nueva_tol}")
            else:
                mostrar_mensaje_error(error)
                
        elif opcion == 2:
            console.print("\n[yellow]M√°ximo n√∫mero de iteraciones antes de parar[/yellow]")
            nuevo_max = validar_numero(
                f"Nuevo m√°ximo (actual: {self.max_iteraciones})", 
                "int", 
                min_val=1, 
                max_val=10000
            )
            
            es_valido, error = validar_max_iteraciones(nuevo_max)
            if es_valido:
                self.max_iteraciones = nuevo_max
                mostrar_mensaje_exito(f"M√°ximo de iteraciones actualizado: {nuevo_max}")
            else:
                mostrar_mensaje_error(error)
                
        elif opcion == 3:
            self.tolerancia = 1e-6
            self.max_iteraciones = 100
            mostrar_mensaje_exito("Par√°metros restaurados a valores por defecto")
            
        if opcion != 4:
            esperar_enter()
    
    def ejecutar_metodo(self):
        """Ejecuta el m√©todo de bisecci√≥n"""
        if not self.configuracion_completa():
            mostrar_mensaje_error("La configuraci√≥n no est√° completa")
            esperar_enter()
            return
        
        limpiar_pantalla()
        mostrar_titulo_principal("M√©todo de Bisecci√≥n", "Ejecutando Algoritmo")
        
        self.mostrar_configuracion()
        
        if not confirmar_accion("¬øDesea ejecutar el m√©todo con esta configuraci√≥n?"):
            return
        
        mostrar_progreso_ejecucion("Ejecutando m√©todo de bisecci√≥n...")
        
        # Inicializar variables
        x = sp.Symbol('x')
        a, b = float(self.a), float(self.b)
        iteraciones = []
        valores_a = []
        valores_b = []
        valores_c = []
        valores_fa = []
        valores_fb = []
        valores_fc = []
        errores = []
        intervalos = []
        
        tiempo_inicio = time.time()
        
        # Evaluar funci√≥n en extremos iniciales
        fa = float(self.funcion.subs(x, a))
        fb = float(self.funcion.subs(x, b))
        
        # Barra de progreso
        with tqdm(total=self.max_iteraciones, desc="Iteraciones", unit="iter") as pbar:
            for i in range(self.max_iteraciones):
                # Calcular punto medio
                c = (a + b) / 2.0
                fc = float(self.funcion.subs(x, c))
                
                # Calcular error
                error = abs(b - a) / 2.0
                
                # Guardar datos de la iteraci√≥n
                iteraciones.append(i + 1)
                valores_a.append(a)
                valores_b.append(b)
                valores_c.append(c)
                valores_fa.append(fa)
                valores_fb.append(fb)
                valores_fc.append(fc)
                errores.append(error)
                intervalos.append((a, b))
                
                # Verificar convergencia
                if error < self.tolerancia or abs(fc) < self.tolerancia:
                    break
                
                # Actualizar intervalo
                if fa * fc < 0:
                    b = c
                    fb = fc
                else:
                    a = c
                    fa = fc
                
                pbar.update(1)
        
        tiempo_ejecucion = time.time() - tiempo_inicio
        
        # Preparar resultados
        self.resultados = {
            "raiz": c,
            "valor_funcion": fc,
            "iteraciones": len(iteraciones),
            "error_final": error,
            "convergencia": error < self.tolerancia,
            "tolerancia": self.tolerancia,
            "intervalo_final": [a, b],
            "tiempo_ejecucion": tiempo_ejecucion,
            "iteraciones_datos": {
                "numeros": iteraciones,
                "a_vals": valores_a,
                "b_vals": valores_b,
                "c_vals": valores_c,
                "fa_vals": valores_fa,
                "fb_vals": valores_fb,
                "fc_vals": valores_fc,
                "errores": errores,
                "intervalos": intervalos
            }
        }
        
        mostrar_mensaje_exito("¬°M√©todo ejecutado exitosamente!")
        esperar_enter()
    
    def mostrar_resultados(self):
        """Muestra los resultados del m√©todo"""
        if self.resultados is None:
            mostrar_mensaje_error("No hay resultados disponibles. Ejecute el m√©todo primero.")
            esperar_enter()
            return
        
        limpiar_pantalla()
        mostrar_titulo_principal("M√©todo de Bisecci√≥n", "Resultados")
        
        # Mostrar resultado principal
        resultado_display = {
            "raiz": self.resultados["raiz"],
            "valor_funcion": self.resultados["valor_funcion"],
            "iteraciones": self.resultados["iteraciones"],
            "error_final": self.resultados["error_final"],
            "convergencia": self.resultados["convergencia"],
            "tolerancia_usada": self.resultados["tolerancia"]
        }
        
        mostrar_resultado_final("Bisecci√≥n", resultado_display, self.resultados["tiempo_ejecucion"])
        
        # Men√∫ de opciones para resultados
        opciones = [
            "Ver tabla de iteraciones",
            "Ver gr√°fica de convergencia",
            "Ver gr√°fica de la funci√≥n con la ra√≠z",
            "Exportar resultados",
            "Volver al men√∫ principal"
        ]
        
        mostrar_menu_opciones(opciones, "Opciones de resultados", False)
        opcion = validar_opcion_menu([1, 2, 3, 4, 5])
        
        if opcion == 1:
            self.mostrar_tabla_iteraciones()
        elif opcion == 2:
            self.mostrar_grafica_convergencia()
        elif opcion == 3:
            self.mostrar_grafica_funcion_raiz()
        elif opcion == 4:
            self.exportar_resultados()
        elif opcion == 5:
            return
    
    def mostrar_tabla_iteraciones(self):
        """Muestra la tabla detallada de iteraciones"""
        limpiar_pantalla()
        mostrar_titulo_principal("M√©todo de Bisecci√≥n", "Tabla de Iteraciones")
        
        datos = self.resultados["iteraciones_datos"]
        
        # Crear datos para la tabla
        valores_tabla = []
        for i in range(len(datos["numeros"])):
            valores_tabla.append({
                "a": datos["a_vals"][i],
                "b": datos["b_vals"][i],
                "c": datos["c_vals"][i],
                "f(a)": datos["fa_vals"][i],
                "f(b)": datos["fb_vals"][i],
                "f(c)": datos["fc_vals"][i],
                "Error": datos["errores"][i]
            })
        
        tabla = crear_tabla_iteraciones(
            datos["numeros"], 
            valores_tabla,
            "Iteraciones del M√©todo de Bisecci√≥n"
        )
        
        console.print(tabla)
        esperar_enter()
    
    def mostrar_grafica_convergencia(self):
        """Muestra gr√°ficas de convergencia"""
        console.print("[yellow]Generando gr√°ficas de convergencia...[/yellow]")
        
        datos = self.resultados["iteraciones_datos"]
        
        try:
            graficar_convergencia_biseccion(
                datos["numeros"],
                datos["intervalos"],
                datos["errores"],
                self.resultados["raiz"]
            )
        except Exception as e:
            mostrar_mensaje_error(f"Error al generar gr√°ficas: {e}")
        
        esperar_enter()
    
    def mostrar_grafica_funcion_raiz(self):
        """Muestra la funci√≥n con la ra√≠z encontrada"""
        console.print("[yellow]Generando gr√°fica de la funci√≥n con la ra√≠z...[/yellow]")
        
        try:
            # Rango de graficaci√≥n alrededor de la ra√≠z
            raiz = self.resultados["raiz"]
            rango_original = abs(self.b - self.a)
            margen = max(rango_original, 2.0)
            rango = (raiz - margen, raiz + margen)
            
            # Evaluar funci√≥n en la ra√≠z
            x = sp.Symbol('x')
            f_raiz = float(self.funcion.subs(x, raiz))
            
            puntos_especiales = [
                (raiz, f_raiz, f"Ra√≠z: {formatear_numero(raiz)}", "red")
            ]
            
            graficar_funcion(
                self.funcion,
                rango,
                f"f(x) = {self.funcion_str} - Ra√≠z encontrada",
                puntos_especiales
            )
        except Exception as e:
            mostrar_mensaje_error(f"Error al generar gr√°fica: {e}")
        
        esperar_enter()
    
    def exportar_resultados(self):
        """Exporta los resultados a un archivo de texto"""
        try:
            nombre_archivo = f"biseccion_resultados_{int(time.time())}.txt"
            
            with open(nombre_archivo, 'w', encoding='utf-8') as f:
                f.write("RESULTADOS DEL M√âTODO DE BISECCI√ìN\n")
                f.write("=" * 50 + "\n\n")
                
                f.write(f"Funci√≥n: f(x) = {self.funcion_str}\n")
                f.write(f"Intervalo inicial: [{self.a}, {self.b}]\n")
                f.write(f"Tolerancia: {self.tolerancia}\n")
                f.write(f"M√°ximo de iteraciones: {self.max_iteraciones}\n\n")
                
                f.write("RESULTADO:\n")
                f.write(f"Ra√≠z encontrada: {formatear_numero(self.resultados['raiz'])}\n")
                f.write(f"f(ra√≠z): {formatear_numero(self.resultados['valor_funcion'])}\n")
                f.write(f"Iteraciones: {self.resultados['iteraciones']}\n")
                f.write(f"Error final: {formatear_numero(self.resultados['error_final'])}\n")
                f.write(f"Convergencia: {'S√≠' if self.resultados['convergencia'] else 'No'}\n")
                f.write(f"Tiempo de ejecuci√≥n: {self.resultados['tiempo_ejecucion']:.4f} segundos\n\n")
                
                f.write("TABLA DE ITERACIONES:\n")
                f.write("-" * 80 + "\n")
                f.write(f"{'Iter':<6} {'a':<12} {'b':<12} {'c':<12} {'f(c)':<12} {'Error':<12}\n")
                f.write("-" * 80 + "\n")
                
                datos = self.resultados["iteraciones_datos"]
                for i in range(len(datos["numeros"])):
                    f.write(f"{datos['numeros'][i]:<6} "
                           f"{formatear_numero(datos['a_vals'][i]):<12} "
                           f"{formatear_numero(datos['b_vals'][i]):<12} "
                           f"{formatear_numero(datos['c_vals'][i]):<12} "
                           f"{formatear_numero(datos['fc_vals'][i]):<12} "
                           f"{formatear_numero(datos['errores'][i]):<12}\n")
            
            mostrar_mensaje_exito(f"Resultados exportados a: {nombre_archivo}")
            
        except Exception as e:
            mostrar_mensaje_error(f"Error al exportar: {e}")
        
        esperar_enter()
    
    def mostrar_ayuda(self):
        """Muestra informaci√≥n de ayuda sobre el m√©todo"""
        mostrar_ayuda_metodo(
            "M√©todo de Bisecci√≥n",
            "El m√©todo de bisecci√≥n es un algoritmo de b√∫squeda de ra√≠ces que funciona "
            "dividiendo repetidamente un intervalo por la mitad y seleccionando el subintervalo "
            "donde la funci√≥n cambia de signo. Es robusto y siempre converge para funciones continuas.",
            [
                "Encontrar ra√≠ces de ecuaciones no lineales",
                "Resolver ecuaciones trascendentales",
                "Problemas de ingenier√≠a donde se garantiza convergencia",
                "Como m√©todo de respaldo cuando otros fallan"
            ],
            [
                "Siempre converge si hay una ra√≠z en el intervalo",
                "No requiere calcular derivadas",
                "F√°cil de implementar y entender",
                "Num√©ricamente estable"
            ],
            [
                "Convergencia relativamente lenta (lineal)",
                "Requiere conocer un intervalo con cambio de signo",
                "Solo encuentra una ra√≠z por ejecuci√≥n",
                "No funciona con ra√≠ces de multiplicidad par"
            ]
        )

def main():
    """Funci√≥n principal del programa"""
    metodo = MetodoBiseccion()
    
    while True:
        limpiar_pantalla()
        mostrar_titulo_principal(
            "M√âTODO DE BISECCI√ìN",
            "B√∫squeda de ra√≠ces por divisi√≥n de intervalos"
        )
        
        mostrar_banner_metodo(
            "M√©todo de Bisecci√≥n",
            "Encuentra ra√≠ces de ecuaciones no lineales dividiendo intervalos sucesivamente"
        )
        
        metodo.mostrar_configuracion()
        
        opciones = [
            "Ingresar funci√≥n f(x)",
            "Configurar intervalo [a,b]",
            "Configurar par√°metros (tolerancia, iteraciones)",
            "Ejecutar m√©todo de bisecci√≥n",
            "Ver resultados y gr√°ficas",
            "Ver ayuda del m√©todo",
            "Salir"
        ]
        
        mostrar_menu_opciones(opciones)
        opcion = validar_opcion_menu([1, 2, 3, 4, 5, 6, 7])
        
        if opcion == 1:
            metodo.ingresar_funcion()
        elif opcion == 2:
            metodo.ingresar_intervalo()
        elif opcion == 3:
            metodo.configurar_parametros()
        elif opcion == 4:
            metodo.ejecutar_metodo()
        elif opcion == 5:
            metodo.mostrar_resultados()
        elif opcion == 6:
            metodo.mostrar_ayuda()
        elif opcion == 7:
            console.print("\n[green]¬°Gracias por usar el m√©todo de bisecci√≥n![/green]")
            break

if __name__ == "__main__":
    main()
